
.zero r0
.temps r6, r7

# --------------------------- Initialize value stack -------------------------

.section data
.space 10000
valstack:
.section init
r3 := valstack

# --------------------------- Initialize jump table --------------------------

.section data
jumptable:
.space 256
.section init

r4 := 255
init_loop:
  r5 := jumptable + r4
  m[r0][r5] := input_error
  r4 := r4 - 1
  if (r4 >=s r0) goto init_loop using r1

# initialize digits in jumptable
  r4 := '9'
digit_init:
  r5 := jumptable + r4
  m[r0][r5] := digit
  r4 := r4 - 1
  if (r4 >=s '0') goto digit_init using r1

  m[r0][jumptable + ' '] := waiting
  m[r0][jumptable + '\n'] := print_all
  m[r0][jumptable + '+'] := add
  m[r0][jumptable + '-'] := minus
  m[r0][jumptable + '*'] := mult
  m[r0][jumptable + '/'] := div
  m[r0][jumptable + '|'] := or
  m[r0][jumptable + '&'] := and
  m[r0][jumptable + 'c'] := change_sign
  m[r0][jumptable + '~'] := not
  m[r0][jumptable + 's'] := swap
  m[r0][jumptable + 'd'] := duplicate  
  m[r0][jumptable + 'p'] := pop_off
  m[r0][jumptable + 'z'] := remove_all

# ------------------------------- Calculator States --------------------------

.section text

  main:
    goto waiting

  waiting:
    r1 := input()

  waiting_with_character:
    if (r1 == -1) goto exit using r5
    r4 := jumptable + r1
    r5 := m[r0][r4]
    goto r5

  entering:
    r1 := input()
    r4 := jumptable + r1
    r5 := m[r0][r4]
    if (r5 == digit) goto append_digit using r4
    goto waiting_with_character

  exit:
    halt

# --------------------------- Arithmetic Operations --------------------------
  
  add:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r4 + r5
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  minus:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 - r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  mult:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r4 * r5
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting
  
  div:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    if (r4 == 0) goto div_zero using r5
    r4 := r5 / r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  or:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 | r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  and:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 & r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  change_sign:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    push r4 on stack r2
    pop r4 off stack r3
    r4 := r4 * -1
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  not:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    push r4 on stack r2
    pop r4 off stack r3
    r4 := ~r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

# ----------------------------- Other Operations -----------------------------

  swap:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    push r4 on stack r3
    push r5 on stack r3
    pop r4 off stack r2
    goto waiting

  duplicate:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    pop r5 off stack r3
    push r5 on stack r3
    push r5 on stack r3
    goto waiting

  pop_off:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    pop stack r3
    goto waiting

  remove_all:
    r4 := valstack
    if (r3 == r4) goto waiting using r5
    pop r6 off stack r3
    goto remove_all

# ------------------------------ Error Messages ------------------------------

  input_error:
    output "Unknown character '"
    output r1
    output "'\n"
    goto waiting

  underflow_unary:
    output "Stack underflow---expected at least 1 element\n"
    goto waiting

  underflow_binary:
    output "Stack underflow---expected at least 2 elements\n"
    goto waiting

    div_zero:
      output "Division by zero\n"
      goto waiting

# -------------------------------- Printing ----------------------------------

  print_all:
    push r4 on stack r2
    r4 := r3
    goto print_d using r5


# ------------------------------ Input Digit Handler -------------------------

  digit:
    r1 := r1 - '0'
    push r1 on stack r3
    goto entering
  
  append_digit:
    push r4 on stack r2
    pop r4 off stack r3
    r4 := r4 * 10
    r4 := r4 - '0'
    r4 := r4 + r1
    push r4 on stack r3
    pop r4 off stack r2
    goto entering


#
# calc40.ums
# Created By Nick Flores and Alex Daniels
# Purpose: Uses a stack and jump table to implement a RPN calulator capable of
#          multiple functions given different input:
#          '/n' : Prints values on the stack
#          ' '  :
#          '+'  :
.zero r0
.temps r6, r7

# --------------------------- Initialize value stack -------------------------

.section data
.space 10000
valstack:
.section init
r3 := valstack

# --------------------------- Initialize jump table --------------------------

.section data
jumptable:
.space 256
.section init

r4 := 255
# Loops through all 256 spots of jumptable and intializes
# them to input_error
init_loop:
  r5 := jumptable + r4
  m[r0][r5] := input_error
  r4 := r4 - 1
  if (r4 >=s r0) goto init_loop using r1
  r4 := '9'

# Initialize digits in jumptable and assigns labels
# based on ascii input value
digit_init:
  r5 := jumptable + r4
  m[r0][r5] := digit
  r4 := r4 - 1
  if (r4 >=s '0') goto digit_init using r1

  m[r0][jumptable + ' '] := waiting
  m[r0][jumptable + '\n'] := print_all
  m[r0][jumptable + '+'] := add
  m[r0][jumptable + '-'] := minus
  m[r0][jumptable + '*'] := mult
  m[r0][jumptable + '/'] := div
  m[r0][jumptable + '|'] := or
  m[r0][jumptable + '&'] := and
  m[r0][jumptable + 'c'] := change_sign
  m[r0][jumptable + '~'] := not
  m[r0][jumptable + 's'] := swap
  m[r0][jumptable + 'd'] := duplicate  
  m[r0][jumptable + 'p'] := pop_off
  m[r0][jumptable + 'z'] := remove_all

# ------------------------------- Calculator States --------------------------

.section text

# Simply goes to the waiting state
  main:
    goto waiting

# Idles, waiting for input from user
  waiting:
    r1 := input()
# Waits for the character input and goes to the spot in
# the jumptable
  waiting_with_character:
    if (r1 == -1) goto exit using r5
    r4 := jumptable + r1
    r5 := m[r0][r4]
    goto r5

# Waits for user input then either goes to append_digit
# or back to waiting_with_character based on input value
  entering:
    r1 := input()
    r4 := jumptable + r1
    r5 := m[r0][r4]
    if (r5 == digit) goto append_digit using r4
    goto waiting_with_character

# Halts and exits the program
  exit:
    halt

# --------------------------- Arithmetic Operations --------------------------

#
# All of the following functions check for correct amount of elements
# and calls the corresponding error message
# Then each function uses registers r5 and r4 to complete the associated
# arithmetic operation
#    
  add:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r4 + r5
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  minus:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 - r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  mult:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r4 * r5
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting
  
# The division function has 3 checks:
#    It checks if either denom is 0 or less than 0
#    and checks if numerator is less than 0
# In the case of the last two, there are 3 helper functions
# that performs the correct signed division by reassigning 
# the respective register to its signed version
  div:
    push r4 on stack r2
    r4 := valstack - 2
    if (r4 <s r3) goto underflow_binary using r5
    pop r5 off stack r3
    pop r4 off stack r3
    if (r5 == 0) goto div_zero
    if (r4 <s r0) goto div_neg_num using r1
    if (r5 <s r0) goto div_neg_denom using r1
    goto norm_div using r1

    div_neg_num:
      if (r5 <s r0) goto neg_both using r1
      r4 := -r4
      r5 := r4 / r5
      r5 := -r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    div_neg_denom:
      r5 := -r5
      r5 := r4 / r5
      r5 := -r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

    neg_both:
      r4 := -r4
      r5 := -r5

    norm_div:
      r5 := r4 / r5
      push r5 on stack r3
      pop r4 off stack r2
      goto waiting

  or:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 | r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  and:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 & r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  change_sign:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    push r4 on stack r2
    pop r4 off stack r3
    r4 := r4 * -1
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

  not:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    push r4 on stack r2
    pop r4 off stack r3
    r4 := ~r4
    push r4 on stack r3
    pop r4 off stack r2
    goto waiting

# ----------------------------- Other Operations -----------------------------

# These functions also have similar intial checks as the above ones

# Swaps the top two values on the stack
  swap:
    r4 := valstack - 2
    if (r3 >s r4) goto underflow_binary using r5
    push r4 on stack r2
    pop r4 off stack r3
    pop r5 off stack r3
    push r4 on stack r3
    push r5 on stack r3
    pop r4 off stack r2
    goto waiting

# Duplicates the top value of the stack
  duplicate:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    pop r5 off stack r3
    push r5 on stack r3
    push r5 on stack r3
    goto waiting

# Pops off of stack    
  pop_off:
    r4 := valstack - 1
    if (r3 >s r4) goto underflow_unary using r5
    pop stack r3
    goto waiting

# Clears the entire stack    
  remove_all:
    r4 := valstack
    if (r3 == r4) goto waiting using r5
    pop r6 off stack r3
    goto remove_all

# Prints the stack, using the print module
  print_all:
    push r4 on stack r2
    r4 := r3
    goto printd using r5

# ------------------------------ Error Messages ------------------------------

# When a character not associated with an operation is inputted
  input_error:
    output "Unknown character '"
    output r1
    output "'\n"
    goto waiting

# When an operation is performed with 0 stack elements (needs 1)
  underflow_unary:
    output "Stack underflow---expected at least 1 element\n"
    goto waiting

# When an operation is performed with 1 stack elements (needs 2)
  underflow_binary:
    output "Stack underflow---expected at least 2 elements\n"
    goto waiting

# When user tries to divide by a 0 denom
    div_zero:
      output "Division by zero\n"
      goto waiting

# ------------------------------ Input Digit Handler -------------------------

# Compares ascii value of input to determine if a digit is seen
  digit:
    r1 := r1 - '0'
    push r1 on stack r3
    goto entering
  
# Appends the digit to the previous seen one    
  append_digit:
    push r4 on stack r2
    pop r4 off stack r3
    r4 := r4 * 10
    r4 := r4 - '0'
    r4 := r4 + r1
    push r4 on stack r3
    pop r4 off stack r2
    goto entering


#
# printd.ums
# Created By: Nick Flores and Alex Daniels
# Purpose: Recursively prints out all the values on the stack
#

.zero r0
.temps r6, r7


# Recursively goes through each value on value stack
# and stores into r5 for printing
printd:
        if (r4 == valstack) goto end_print using r5     
        output ">>> "        
        r5 := m[r0][r4]               
        push r5 on stack r2
        goto find_case linking r1
        output "\n"
        r4 := r4 + 1
        goto printd                                    

# Determines if this is a special case number
find_case: 
        pop r5 off stack r2
        push r1 on stack r2
        push r3 on stack r2
        push r4 on stack r2

        if (r5 <s 0) goto negative using r4
        if (r5 == 0) goto zero using r4
        
        goto print_rec

# Handles negative numbers
negative:

        r4 := 2147483648
        r4 := -r4                                
        if (r5 == r4) goto most_negative using r1

        output '-'
        r5 := -r5
        goto print_rec

# Handles most negative number
most_negative:
        output "-2147483648\n"
        goto recurse

# Handles the zero case
zero:
        output "0\n" 
        goto recurse

print_rec:
        r3 := r5     # Stores digit to print in r3 
        r4 := r3 / 10
        if (r4 != 0) goto store_remainder        
        r5 := print_digit
        r1 := find_remainder
        goto find_remainder

find_remainder:
        r4 := r4 * 10
        r3 := r3 - r4
        goto print_digit

# Stores remainder for later printing
store_remainder:
        push r4 on stack r2
        r1 := find_remainder
        goto find_case

print_digit:
        r3 := r3 + '0'    # Converts number to an ascii digit 
        output r3          
        pop r4 off stack r2
        pop r3 off stack r2
        pop r5 off stack r2
        goto r5            

# Restores registers to print the next value on the value stack
recurse:
        pop r4 off stack r2
        pop r3 off stack r2
        pop r1 off stack r2
        r4 := r4 + 1
        goto printd

# Exits the printing function
end_print:
        pop r4 off stack r2        
        goto waiting


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                             *
*                         README for Assignment 8                             *
*                            "RPN Calculator"                                 *
*                 Written by: Nick Flores and Alex Daniels                    *
*       With assistance from: Tara Watson                                     *
*               Date created: Apr 30, 2016                                    *
*                                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Included for this project:

• calc40.um
• calc40.ums
• README
• callmain.ums
• printd.ums
• um2
• stack.ums


Description: This assignment tasked us to deliver on the second half of
             the course by diving into machinge-level programming and
             solidify our understanding of machine-level implementation.
             The program to build is a Reverse Polish Calculator, which
             utilizes our previously built Universal Machine implementation.
             The calculator reads from standard output and writes to standard
             output. Like all RPN calculators, digits and operators are 
             represented in the form of a value stack. 

                * To Compile the RPN:
                  umasm stack.ums calc40.ums printd.ums callmain.ums > calc40.um

                * To run, use the following command: './um <filename>'
                * where filename is the name of a valid UM program binary file

Correct Implementations: All modules have been correctly implemented for
                         this assignment.

Departures: There were no deviations or departures from the recommended
            calling conventions. We followed the specification guidelines
            throughout implementation and consutled examples when formatting
            the calling conventions of our source files.

Print Module: Our print module was implemented using recursion, handling the
              zero case first, then negative case, then max negative case, and
              so fourth until all cases were covered.


* * * * * * * * * * * * *

Total time to analyze the assignment: 1 hour

Total time to write assembly code: 7 hours

Total time to debug the assignment: 2 hours
